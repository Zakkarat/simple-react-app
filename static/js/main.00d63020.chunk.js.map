{"version":3,"sources":["CardContainer/SelectOptions.js","CardContainer/Select.js","FilterBar/FilterBar.js","CardContainer/Card.js","CardContainer/Pagination.js","CardContainer/CardContainer.js","App/App.js","serviceWorker.js","index.js"],"names":["options","gender","status","species","Select","props","react_default","a","createElement","name","id","className","concat","map","option","key","FilterBar","onSubmit","e","preventDefault","elements","target","value","Array","from","reduce","acc","elem","Object","objectSpread","defineProperty","urlPart","keys","toString","replace","transition","type","CardContainer_Select","Card","src","image","alt","Pagination","onClick","toLowerCase","handleClick","button","CardContainer","defaultUrl","_useState","useState","results","_useState2","slicedToArray","data","setData","_useState3","next","prev","curr","_useState4","page","setPage","_useState5","_useState6","isLoading","setIsLoading","useEffect","filters","ignore","_ref","asyncToGenerator","regenerator_default","mark","_callee","result","wrap","_context","axios","sent","info","stop","apply","this","arguments","fetchData","class","Fragment","character","CardContainer_Card","CardContainer_Pagination","newPage","App","url","setUrl","src_FilterBar_FilterBar","src_CardContainer_CardContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.00d63020.chunk.js","sourcesContent":["export const options =  {\r\n    gender: ['All', 'Male', 'Female', 'Genderless', 'Unknown'],\r\n    status: ['All', 'Alive', 'Dead', 'unknown'],\r\n    species: ['All', 'Human', 'Alien','Humanoid', 'Poopybutthole']\r\n}","import React from 'react'\r\nimport {options} from \"./SelectOptions\"\r\n\r\nconst Select = (props) => {\r\n    return(\r\n        <select name={props.id} className=\"select\">\r\n            {options[`${props.id}`].map(option => {\r\n                return (<option key={option}>{option}</option>)\r\n            })}\r\n        </select>\r\n    );\r\n}\r\n\r\nexport default Select;\r\n","import React from \"react\";\r\nimport \"../FilterBar/FilterBar.css\";\r\nimport Select from \"../CardContainer/Select\";\r\nconst FilterBar = props => {\r\n  const generateUrl = e => {\r\n    e.preventDefault();\r\n    const { elements } = e.target;\r\n    const value = Array.from(elements).reduce((acc, elem) => {\r\n      if (elem.name && elem.value !== \"All\" && elem.value !== \"\") {\r\n        return { ...acc, [elem.name]: elem.value };\r\n      }\r\n      return acc;\r\n    }, {});\r\n    const urlPart = Object.keys(value)\r\n      .map(key => `${key}=${value[key]}`)\r\n      .toString()\r\n      .replace(/,/g, \"&\");\r\n    props.transition(`https://rickandmortyapi.com/api/character/?${urlPart}`);\r\n  };\r\n  const generateSelect = () => {\r\n    const selectTypes = [\"gender\", \"status\", \"species\"];\r\n    return selectTypes.map(type => {\r\n      return <Select key={type} id={type} />;\r\n    });\r\n  };\r\n  return (\r\n    <div className=\"filterContainer\">\r\n      <form onSubmit={generateUrl}>\r\n        <label>\r\n          <div className=\"search-container\">\r\n            <h1 className=\"search-header\">Search</h1>\r\n            <div>\r\n              <input name=\"name\" className=\"search\" />\r\n            </div>\r\n          </div>\r\n        </label>\r\n\r\n        <div className=\"select-wrapper\">\r\n          <label>\r\n            <h2 className=\"search-header\">Filters</h2>\r\n            <div className=\"select-container\">{generateSelect()}</div>\r\n          </label>\r\n          <label>\r\n            <input type=\"submit\" className=\"submit-button\" />\r\n          </label>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FilterBar;\r\n","import React from 'react'\r\n\r\nconst Card = (props) => {\r\n    return (\r\n        <div className='card'>\r\n            <img className=\"img-card\" src={props.image} alt={`${props.name}`}/>\r\n            <h3 className=\"text-card\">{props.name}</h3>\r\n            <h4 className=\"text-card\">Gender: {props.gender}</h4>\r\n            <h4 className=\"text-card\">Status: {props.status}</h4>\r\n            <h4 className=\"text-card\">Species: {props.species}</h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\n\r\nconst Pagination = props => {\r\n  const buttons = [\"Prev\", \"Next\"];\r\n    const onClick = (e) => {\r\n        const value = e.target.id.toLowerCase();\r\n        props.handleClick(props[`${value}`])\r\n    }\r\n\r\n  return (\r\n    <div className=\"pages\">\r\n      {buttons.map(button => (\r\n       props[`${button.toLowerCase()}`] ? <button onClick={onClick} className=\"page-buttons\" key={button} id={button}>{button}</button> : null\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Card from \"./Card\";\r\nimport Pagination from \"./Pagination\";\r\nimport \"../CardContainer/CardContainer.css\";\r\nimport axios from \"axios\";\r\nconst CardContainer = props => {\r\n  const defaultUrl = \"https://rickandmortyapi.com/api/character/?page=1\";\r\n  const [data, setData] = useState({ results: [] });\r\n  const [page, setPage] = useState({\r\n    next: \"\",\r\n    prev: \"\",\r\n    curr: defaultUrl\r\n  });\r\nconst [isLoading, setIsLoading] = useState(false);\r\n  useEffect(() => {\r\n    if(props.filters) {\r\n      setPage({curr: props.filters});\r\n    } else {\r\n      setPage({curr: defaultUrl});\r\n    }\r\n  }, [props.filters])\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    let ignore = false;\r\n    const fetchData = async () => {\r\n      const result = await axios(`${page.curr}`);\r\n      if (!ignore) {\r\n        setData(result.data);\r\n        setPage(result.data.info);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n    setIsLoading(false)\r\n    return () => {\r\n      ignore = true;\r\n      \r\n    };\r\n  }, [page.curr]);\r\n\r\n  const handleClick = newPage => {\r\n    setPage({ curr: newPage });\r\n  };\r\n  return (isLoading ? <div class=\"lds-ring\"><div></div><div></div><div></div><div></div></div> :\r\n    <>\r\n      <div className=\"card-container\">\r\n        {data.results.map(character => (\r\n          <Card\r\n            key={character.id}\r\n            name={character.name}\r\n            gender={character.gender}\r\n            status={character.status}\r\n            species={character.species}\r\n            image={character.image}\r\n          />\r\n        ))}\r\n      </div>\r\n      <Pagination handleClick={handleClick} prev={page.prev} next={page.next} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CardContainer;\r\n","import React, { useState} from \"react\";\nimport \"./App.css\";\nimport FilterBar from \"../FilterBar/FilterBar\";\nimport CardContainer from \"../CardContainer/CardContainer\";\n\nconst App = props => {\n  const [url, setUrl] = useState('')\n  const handleSubmit = (url) => setUrl(url);\n\n  return (\n    <div className=\"App\">\n        <FilterBar transition={handleSubmit} />\n        <CardContainer filters={url}/>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}